# file paths
# ----------------------

history_file: ~
history_output_directory: ~
# if path is defined will generate:
#  - history_output_directory/block_history.json
#  - history_output_directory/request_history.json and
#  - history_output_directory/remaining_requests.json
# ----------------------

# other
# ----------------------
kp_eta: 0.05

measure_runtime: True # we always want to measure the runtime

cmd_time: >-
  /usr/bin/time -f '{wall_time: %E, max_rss: %M}' -o results/runtime_info.yaml
cmd_gurobi_env: cp [% 'data_dir' | at_runtime(exp_host_lst) %]/[% my_run.gurobi_env %] gurobi.env
cmd_env_vars: GUROBI_HOME='[% 'gurobi_home' | at_runtime(exp_host_lst) %]' LD_LIBRARY_PATH='[% 'gurobi_ld_library_path' | at_runtime(exp_host_lst) %]' RUST_LOG=info CACHE_REQUEST_COST=[% my_run.cache_request_cost %]
cmd_dp_planner_bin_w_runtime: "[% my_run.cmd_env_vars %] [% my_run.cmd_time if my_run.measure_runtime | default(False) %] [% 'exp_code_dir' | at_runtime(exp_host_lst) %]/cohere-dpolicy/target/release/dp_planner"

# TODO [nku] The hardcoded delta and the hardcoded privacy unit may need to be removed
cmd_trap_analysis: >-
  [% my_run.cmd_env_vars %] [% 'exp_code_dir' | at_runtime(exp_host_lst) %]/cohere-dpolicy/target/release/measure_traps
  --dir ./results --privacy-unit user [% my_run.cmd_trap_analysis_privacy_time_unit %] --alphas [% my_run.budget.TypeConfig[my_run.budget.type].alphas %] --delta 1.0e-7

cmd_trap_analysis_privacy_time_unit: ""

# run the trap analysis (assuming all requests were accepted (also the rejected ones) -> can be used to investigate the privacy cost of an entire workload
cmd_trap_analysis_all: "[% my_run.cmd_trap_analysis %] --output trap_analysis_all.json --request-mode all"

cache_request_cost: 0


# copy (create simlink) the requests file into the local results such that an allocation can be investigated with things not present in the dp-planner
requests_file: results/all_requests.json
blocks_file: results/all_blocks.json
schema_file: results/schema.json
cmd_link_workload: ln -s [% my_run.src_schema_file %] [% my_run.schema_file %] && ln -s [% my_run.src_requests_file %] [% my_run.requests_file %] && ln -s [% my_run.src_blocks_file %] [% my_run.blocks_file %]


block_selector_seed_cmd: "--block-selector-seed [% my_run.workload.rep + 1000 %]"

# set `allocation` as one of the keys
AllocationConfig:
#  greedy: "greedy"
#  dpf: "dpf [% my_run.block_selector_seed_cmd %]"
#  weighted-dpf: "dpf --weighted-dpf [% my_run.block_selector_seed_cmd %]"
#
#  # the + versions consider the remaining budget of selected blocks for computing the (weighted) dominant share
#  dpf+: "dpf --dominant-share-by-remaining-budget [% my_run.block_selector_seed_cmd %]"
#  weighted-dpf+: "dpf --weighted-dpf --dominant-share-by-remaining-budget [% my_run.block_selector_seed_cmd %]"

  dpk-gurobi: "efficiency-based [% my_run.block_selector_seed_cmd %] dpk --eta [% my_run.kp_eta %] --kp-solver gurobi"
#  ilp: "ilp"



cmd_simulation: >-
  [% my_run.cmd_link_workload %] &&
  [% my_run.cmd_gurobi_env %] && [% my_run.cmd_dp_planner_bin_w_runtime %]
  --schema [% my_run.schema_file %]
  --requests [% my_run.requests_file %]
  --blocks [% my_run.blocks_file %]
  --req-log-output results/request_log.csv
  --round-log-output results/round_log.csv
  --runtime-log-output results/runtime_log.csv
  --stats-output results/stats.json
  [% my_run.simulation.cmd %]
  [% my_run.AllocationConfig[my_run.allocation] %]
  [% my_run.composition %]
  [% my_run.budget.cmd %]


simulation:
  # batch_size: -> can be set, otherwise, will look at created field in requests
  max_requests: ~

  cmd: >-
    simulate
    --timeout-rounds [% my_run.budget.timeout_rounds %]
#    [% '--max-requests [% my_run.simulation.max_requests %] ' if my_run.simulation.max_requests is not none else '' %]


budget:

  # mode: -> always needs to be set: options: Fix, Unlocking
  ModeConfig:
    Fix: {}
    Unlocking:
      trigger: round
      n_steps: ~
      slack: 0.4 # must be between [0, 1]

  #type: -> always needs to be set: options: EpsDeltaDp, EpsDp, RdpFromEpsDeltaDp
  TypeConfig:
  #  EpsDeltaDp:
  #    eps: 1
  #    delta: 1.0e-07
  #  EpsDp:
  #    eps: 1

    RdpFromEpsDeltaDp:
  #    eps: 1
  #    delta: 1.0e-07
      alphas: 1.5 1.75 2 2.5 3 4 5 6 8 16 32 64 1e6 1e10
      convert_block_budgets: True

  cmd: >-
    [% 'fix-budget ' if my_run.budget.mode == 'Fix' else '' %]
    [% 'unlocking-budget --trigger [% my_run.budget.ModeConfig.Unlocking.trigger %] --slack [% my_run.budget.ModeConfig.Unlocking.slack %] --n-steps [% my_run.budget.ModeConfig.Unlocking.n_steps %]' if my_run.budget.mode == 'Unlocking' else '' %]
    [% '--alphas [% my_run.budget.TypeConfig[my_run.budget.type].alphas %]' if my_run.budget.TypeConfig[my_run.budget.type].alphas is defined %]
    [% '--convert-block-budgets' if my_run.budget.TypeConfig[my_run.budget.type]['convert_block_budgets'] | default(False)
    else '' %]


n_alphas: "[% my_run.budget.TypeConfig.RdpFromEpsDeltaDp.alphas |replace('.', '') | trim | wordcount %]"
